openapi: 3.0.1
info:
  title: CodeCombat API
  version: ''
paths:
  /auth/login-o-auth:
    get:
      description: Logs a user in.
      operationId: AuthService.get
      tags:
        - Auth
      parameters:
        - name: provider
          in: query
          description: Your OAuth Provider ID
          required: true
          schema:
            type: string
        - name: accessToken
          in: query
          description: >-
            Will be passed through your lookup URL to get the user ID. Required
            if no `code`.
          required: false
          schema:
            type: string
        - name: code
          in: query
          description: >-
            Will be passed to the OAuth token endpoint to get a token. Required
            if no `accessToken`.
          required: false
          schema:
            type: string
        - name: redirect
          in: query
          description: >-
            Override where the user will navigate to after successfully logging
            in.
          required: false
          schema:
            type: string
        - name: errorRedirect
          in: query
          description: >-
            If an error happens, redirects the user to this url, with at least
            query parameters `code`, `errorName` and `message`.
          required: false
          schema:
            type: string
      responses:
        '204':
          description: ''
      security: &ref_0
        - BasicAuth: []
  /clan/{handle}/members:
    put:
      description: Upserts a user into the clan.
      operationId: ClansService.put
      tags:
        - Clans
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClanResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
  /classrooms:
    get:
      description: Returns the classroom details for a class code.
      operationId: ClassroomsService.get
      tags:
        - Classrooms
      parameters:
        - name: code
          in: query
          description: The classroom's `code`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: limit the return number of members for the classroom
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomResponseWithCode'
      security: *ref_0
    post:
      description: Creates a new empty `Classroom`.
      operationId: ClassroomsService.create
      tags:
        - Classrooms
      parameters: []
      responses:
        '204':
          description: ''
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                ownerID:
                  $ref: '#/components/schemas/ObjectId'
                aceConfig:
                  $ref: '#/components/schemas/AceConfig'
              required:
                - name
                - ownerID
                - aceConfig
  /classrooms/{handle}/members:
    put:
      description: Upserts a user into the classroom.
      operationId: ClassroomsService.upsert
      tags:
        - Classrooms
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                userId:
                  type: string
                retMemberLimit:
                  type: number
                  format: double
              required:
                - code
                - userId
    delete:
      description: Remove a user from the classroom.
      operationId: ClassroomsService.removeUser
      tags:
        - Classrooms
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                retMemberLimit:
                  type: number
                  format: double
              required:
                - userId
  /classrooms/{classroomHandle}/courses/{courseHandle}/enrolled:
    put:
      description: |
        Enrolls a user in a course in a classroom.
        If the course is paid, user must have an active license.
        User must be a member of the classroom.
      operationId: ClassroomsService.enrollUser
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: courseHandle
          in: path
          description: The course's `_id`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: >-
            limit the return number of members for the classroom, the default
            value is 1000
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/ObjectId'
              required:
                - userId
  /classrooms/{classroomHandle}/courses/{courseHandle}/remove-enrolled:
    put:
      description: |
        Removes an enrolled user from a course in a classroom.
      operationId: ClassroomsService.unenrollUser
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: courseHandle
          in: path
          description: The course's `_id`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: >-
            limit the return number of members for the classroom, the default
            value is 1000
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassroomResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/ObjectId'
              required:
                - userId
  /classrooms/{classroomHandle}/stats:
    get:
      description: |
        Returns a list of all members stats for the classroom.
      operationId: ClassroomsService.getStats
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: project
          in: query
          description: >
            If specified, include only the specified projection of returned
            stats; else, return all stats. Format as a comma-separated list,
            like `creator,playtime,state.complete`.
          required: false
          schema:
            type: string
        - name: memberLimit
          in: query
          description: >-
            Limit the return member number. the default value is 10, and the max
            value is 100
          required: false
          schema:
            type: number
            format: double
        - name: memberSkip
          in: query
          description: |
            Skip the members that doesn't need to return, for pagination
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassroomStats'
      security: *ref_0
  /classrooms/{classroomHandle}/members/{memberHandle}/sessions:
    get:
      description: |
        Returns a list of all levels played by the user for the classroom.
      operationId: ClassroomsService.getLevelsPlayedForUser
      tags:
        - Classrooms
      parameters:
        - name: classroomHandle
          in: path
          description: The classroom's `_id`.
          required: true
          schema:
            type: string
        - name: memberHandle
          in: path
          description: The classroom member's `_id`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LevelSessionResponse'
      security: *ref_0
  /playtime-stats:
    get:
      description: Returns the playtime stats
      operationId: StatsService.getPlaytimeStats
      tags:
        - Stats
      parameters:
        - name: startDate
          in: query
          description: Earliest an included user was created
          required: false
          schema:
            type: string
        - name: endDate
          in: query
          description: Latest an included user was created
          required: false
          schema:
            type: string
        - name: country
          in: query
          description: Filter by country string
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaytimeStatsResponse'
      security: *ref_0
  /license-stats:
    get:
      description: Returns the license stats
      operationId: StatsService.getLicenseStats
      tags:
        - Stats
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseStatsResponse'
      security: *ref_0
  /users:
    post:
      description: Creates a `User`.
      operationId: UsersService.create
      tags:
        - Users
      parameters: []
      responses:
        '204':
          description: ''
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                preferredLanguage:
                  type: string
                heroConfig:
                  $ref: '#/components/schemas/HeroConfig'
                birthday:
                  type: string
              required:
                - name
                - email
  /users/{handle}:
    get:
      description: Returns a `User`.
      operationId: UsersService.get
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
        - name: includePlayTime
          in: query
          description: Set to non-empty string to include stats.playTime in response
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
    put:
      description: Modify name of a `User`
      operationId: UsersService.modifyUser
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                birthday:
                  type: string
              required:
                - name
  /users/{handle}/classrooms:
    get:
      description: >-
        Returns a list of `Classrooms` this user is in (if a student) or owns
        (if a teacher).
      operationId: UsersService.getClassrooms
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
        - name: retMemberLimit
          in: query
          description: limit the return number of members for each classroom
          required: false
          schema:
            type: number
            format: double
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassroomResponseWithCode'
      security: *ref_0
  /users/{handle}/hero-config:
    put:
      description: Set the user's hero.
      operationId: UsersService.setHero
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                thangType:
                  $ref: '#/components/schemas/ObjectId'
  /users/{handle}/ace-config:
    put:
      description: >-
        Set the user's aceConfig (the settings for the in-game Ace code editor),
        such as whether to enable autocomplete.
      operationId: UsersService.setAceConfig
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                liveCompletion:
                  type: boolean
                behaviors:
                  type: boolean
                language:
                  type: string
  /users/{handle}/o-auth-identities:
    post:
      description: >
        Adds an OAuth2 identity to the user, so that they can be logged in with
        that identity. You need to send the OAuth code or the access token to
        this endpoint.

        1. If no access token is provided, it will use your OAuth2 token URL to
        exchange the given code for an access token.

        2. Then it will use the access token (given by you, or received from
        step 1) to look up the user on your service using the lookup URL, and
        expects a JSON object in response with an `id` property.

        3. It will then save that user `id` to the user in our db as a new
        OAuthIdentity.
      operationId: UsersService.addOauth2Identity
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                accessToken:
                  type: string
                code:
                  type: string
              required:
                - provider
  /users/{handle}/subscription:
    put:
      description: >
        Grants a user premium access to the "Home" version up to a certain time.
        ```
      operationId: UsersService.grantPremiumAccess
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
  /users/{handle}/shorten-subscription:
    put:
      description: >
        If the user already has a premium access up to a certain time, this
        shortens/revokes his/her premium access.

        If the ends is less than or equal to the current time, it revokes the
        subscription and sets the end date to be the current time, else it just
        shortens the subscription.
      operationId: UsersService.shortenSubscription
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
  /users/{handle}/license:
    put:
      description: |
        Grants a user access to the "Classroom" version up to a certain time.
        Sets their role to "student".
      operationId: UsersService.grantClassroomAccess
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
  /users/{handle}/shorten-license:
    put:
      description: >
        If the user already has access to the "Classroom" version up to a
        certain time, this shortens/revokes his/her access.

        If the ends is less than or equal to the current time, it revokes the
        enrollment and sets the end date to be the current time, else it just
        shortens the enrollment.
      operationId: UsersService.shortenLicense
      tags:
        - Users
      parameters:
        - name: handle
          in: path
          description: The document's `_id` or `slug`.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
  /users/user-lookup/{property}/{value}:
    get:
      description: Redirects to `/{handle}` given a unique, identifying property
      operationId: UsersService.lookup
      tags:
        - Users
      parameters:
        - name: property
          in: path
          description: The property to lookup by. May either be `"israel-id"` or `"name"`.
          required: true
          schema:
            type: string
        - name: value
          in: path
          description: The value to be looked up.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      security: *ref_0
components:
  schemas:
    ClanResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        displayName:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
        ownerID:
          $ref: '#/components/schemas/ObjectId'
        description:
          type: string
        type:
          type: string
        kind:
          type: string
    ClassroomResponseWithCode:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
        ownerID:
          $ref: '#/components/schemas/ObjectId'
        description:
          type: string
        code:
          type: string
        codeCamel:
          type: string
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        clanId:
          $ref: '#/components/schemas/ObjectId'
    AceConfig:
      type: object
      properties:
        language:
          type: string
    ClassroomStats:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        stats:
          $ref: '#/components/schemas/ClassroomStatsInfo'
    ClassroomStatsInfo:
      type: object
      properties:
        gamesCompleted:
          type: number
          format: double
        playtime:
          type: number
          format: double
    LevelSessionResponse:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/LevelSessionState'
        level:
          $ref: '#/components/schemas/LevelSessionLevelInfo'
        levelID:
          type: string
          description: Level slug like `wakka-maul`
        creator:
          $ref: '#/components/schemas/ObjectId'
        playtime:
          type: integer
          description: Time played in seconds.
        changed:
          $ref: '#/components/schemas/Datetime'
        created:
          $ref: '#/components/schemas/Datetime'
        dateFirstCompleted:
          $ref: '#/components/schemas/Datetime'
        submitted:
          type: boolean
          description: For arenas. Whether or not the level has been added to the ladder.
        published:
          type: boolean
          description: >-
            For shareable projects. Whether or not the project has been shared
            with classmates.
      required:
        - state
        - level
        - levelID
        - creator
        - playtime
        - changed
        - created
        - dateFirstCompleted
        - submitted
        - published
    LevelSessionState:
      type: object
      properties:
        complete:
          type: boolean
      required:
        - complete
    LevelSessionLevelInfo:
      type: object
      properties:
        original:
          type: string
          description: The id for the level.
      required:
        - original
    UserResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        email:
          type: string
        name:
          type: string
        slug:
          type: string
        role:
          $ref: '#/components/schemas/roleString'
        stats:
          $ref: '#/components/schemas/UserStats'
        oAuthIdentities:
          type: array
          items:
            $ref: '#/components/schemas/OauthIdentity'
        subscription:
          $ref: '#/components/schemas/Subscription'
        license:
          $ref: '#/components/schemas/License'
    UserStats:
      type: object
      properties:
        gamesCompleted:
          type: number
          format: double
        playTime:
          type: number
          format: double
    OauthIdentity:
      type: object
      properties:
        provider:
          type: string
        id:
          type: string
    Subscription:
      type: object
      properties:
        ends:
          $ref: '#/components/schemas/Datetime'
        active:
          type: boolean
    License:
      type: object
      properties:
        ends:
          $ref: '#/components/schemas/Datetime'
        active:
          type: boolean
    ObjectId:
      type: string
    Datetime:
      type: string
      description: |
        Has regex "/^\\d{4}-\\d{2}-\\d{2}T\\d{2}\\:\\d{2}\\:\\d{2}\\.\\d{3}Z$/"
    roleString:
      type: string
      description: Usually either 'teacher' or 'student'
    ClassroomResponse:
      type: object
      description: Subset of properties listed here
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
        ownerID:
          $ref: '#/components/schemas/ObjectId'
        description:
          type: string
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    Course:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/ObjectId'
        levels:
          type: array
          items: {}
        enrolled:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
        instance_id:
          $ref: '#/components/schemas/ObjectId'
    PlaytimeStatsResponse:
      type: object
      properties:
        playTime:
          type: number
          format: double
        gamesPlayed:
          type: number
          format: double
    LicenseStatsResponse:
      type: object
      properties:
        licenseDaysGranted:
          type: number
          format: double
        licenseDaysUsed:
          type: number
          format: double
        licenseDaysRemaining:
          type: number
          format: double
        activeLicenses:
          type: number
          format: double
    HeroConfig:
      type: object
      properties:
        thangType:
          $ref: '#/components/schemas/ObjectId'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
servers:
  - url: https://codecombat.com/api
    description: Production
